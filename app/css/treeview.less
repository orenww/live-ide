.sidebar {
	width: 254px;
}
#vql-tree {
	height: -webkit-calc(~"100% - 41px");
	background-color: #EEEEEE;
	overflow: auto;
	box-shadow: inset 0px 3px 8px #aaa;
}
.tree-filter {
	background-color: #EEEEEE;
	padding: 10px 10px 0 10px;
	border-bottom: 1px solid #ddd;
}

.tree-node-hover(){
	color: black;
	background-color: #dedede;
}
// from angular.treeview.css
div[angular-treeview] {
	@selectedColor: #fff;

	/* prevent user selection */
	-moz-user-select: -moz-none;
	-khtml-user-select: none;
	-webkit-user-select: none;
	-ms-user-select: none;
	user-select: none;

	/* default */
	font-family: Tahoma;
	font-size:14px;
	color: #555;
	text-decoration: none;

	ul {
	  margin: 0;
	  padding: 0;
	  list-style: none; 
	  border: none;
	  overflow: hidden;
	}

	.prop-toggle {
		margin-left: 7px;
	}

	.vqls-list {
		padding-left: 0;
		font-size: 11px;
		font-style: italic;
	}

	.tree-node {
		position: relative;
		// padding: 0 0 0 20px;
		line-height: 25px;
		font-size: 14px;
		@iconWidth: 15px;

		.expanded {
			padding: 0;
			display: inline-block;
			width: @iconWidth;
		}

		.collapsed {
			padding: 0;
			display: inline-block;
			width: @iconWidth;
		}

		.normal {
			padding: 0px;
			cursor: default;
			display: inline-block;
			width: @iconWidth;
		}

		.attr {
			padding: 1px 5px;
			float: left;
			line-height: 20px;
		}

		.node-changed {
			position: absolute;
			width: 5px;
			height: 5px;
			display: none;
			background-color: tomato;
			top: 20px;
			margin-left: 10px;
			border-radius: 3px;
		}

		.changed .node-changed {
			display: block;
		}

		.attr-toggle {
			padding: 0px 2px;
		}
		.selected {
			// color: white;
			padding: 2px 5px;

			background: -webkit-linear-gradient(top, #65b2fb, #3492e9);
			border-color: #318ce4 #2b82db #2878c7;
			border-width: 1px 0px 1px;
			border-style: solid;

			.node-label {
				color: @selectedColor;
			}

			.attr {
				top: 1px;
				position: relative;
			}
		}
		
		i, div {
		  cursor: pointer;
		}

		@nodeLevelIterations: 10;
		// tree levels
		.nodeLevelIterator (@nodeLevel) when (@nodeLevel > 0) {
			.node-level-@{nodeLevel} {
		        // resulting css
		        @level: @nodeLevel * 1.5;
		        padding-left: ~"@{level}rem";
		    }
		    .nodeLevelIterator(@nodeLevel - 1);
		}

		.node-level-0 {
			padding-left: 0.4rem;
		};

		.nodeLevelIterator(@nodeLevelIterations);
	}

	.tree-node-label {
		padding: 3px 3px 3px 5px;
		
		&:hover {
			.tree-node-hover();
		}

		.node-label {
			display: inline-block;
		}

		.dropdown {
			display: inline-block;
		}
	}

	.tree-node-attr {
		@iconIndent: 2px 5px 2px 15px;
		padding: @iconIndent;
		
		&:hover {
			.tree-node-hover()
		}

		&.selected {
			padding: @iconIndent;
			
			.prop-label {
				color: @selectedColor;
			}
		}
	}

}
